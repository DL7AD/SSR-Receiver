package gui;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.ImageIcon;
import map.Airway;
import map.MapPanel;
import map.SID;
import map.STAR;

public class RouteSelector extends javax.swing.JFrame {
    
    private int type;
    private HashMap<Integer,String> selected = new HashMap<Integer,String>(5);
    
    private static RouteSelector instance;
    
    public static RouteSelector getInstance(int type) {
        if(RouteSelector.instance == null)
            RouteSelector.instance = new RouteSelector();
        RouteSelector.instance.setType(type);
        return RouteSelector.instance;
    }
    public static RouteSelector getInstance() {
        if(RouteSelector.instance == null)
            RouteSelector.instance = new RouteSelector();
        return RouteSelector.instance;
    }
    private RouteSelector() {
        initComponents();
        
        //Set position
        Dimension screenSize = new Dimension(Toolkit.getDefaultToolkit().getScreenSize());
        Dimension windowSize = new Dimension(getPreferredSize());
        int wdwLeft = Math.min(350, (screenSize.width - windowSize.width));
        int wdwTop = Math.min(80, screenSize.height - windowSize.height);
        this.setLocation(wdwLeft, wdwTop);
        
        //Task Bar Icon
        Image taskBarIcon = new ImageIcon(this.getClass().getResource("/gui/taskbaricon.png")).getImage();
        this.setIconImage(taskBarIcon);
    }
    private void setType(int type) {
        this.type = type;
        if(type == Airway.SID) {
            this.setTitle("Select SID");
        } else if(type == Airway.STAR) {
            this.setTitle("Select STAR");
        }
        this.setScrollPaneList(this.getList(type));
    }
    private String[] getList(int type) {
        ArrayList<Airway> airways = type == Airway.SID ? (ArrayList<Airway>)SID.getAll() : (ArrayList<Airway>)STAR.getAll();
        String[] list = new String[airways.size()];
        for(int i = 0; i < airways.size(); i++) {
            if(type == Airway.SID) {
                SID sid = (SID)airways.get(i);
                list[i] = sid.getAirport() + " " + sid.getRunway() + " " + sid.getName();
            } else if(type == Airway.STAR) {
                STAR star = (STAR)airways.get(i);
                list[i] = star.getAirport() + " " + star.getRunway() + " " + star.getName();
            }
        }
        Arrays.sort(list);
        return list;
    }
    private void setScrollPaneList(final String[] strings) {
        this.list.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
    }
    public String getSelected(int type) {
        return this.selected.get(type);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        airwayList = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        save = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setResizable(false);

        list.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return 0; }
            public Object getElementAt(int i) { return null; }
        });
        airwayList.setViewportView(list);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airwayList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 52, Short.MAX_VALUE)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(airwayList, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(save))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        this.selected.put(this.type, ((String)this.list.getSelectedValue()).split(" ")[2]);
        MapPanel.getInstance().repaintMap();
        this.setVisible(false);
    }//GEN-LAST:event_saveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane airwayList;
    private javax.swing.JButton cancel;
    private javax.swing.JList list;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
