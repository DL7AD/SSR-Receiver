package gui;

import decoder.Squitter;
import decoder.Update;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JTable;

public class SquitterViewer extends javax.swing.JFrame {
    
    private static SquitterViewer instance;
    private int activeTable;
    private byte nextTablePosition;
    
    private SquitterViewer() {
        initComponents();
        
        //Task Bar Icon
        Image taskBarIcon = new ImageIcon(this.getClass().getResource("/gui/taskbaricon.png")).getImage();
        this.setIconImage(taskBarIcon);
    }
    public static SquitterViewer getInstance() {
        if(SquitterViewer.instance == null)
            SquitterViewer.instance = new SquitterViewer();
        return SquitterViewer.instance;
    }
    public void addPacket(Squitter squitter, String errorMessage) {
        if(this.nextTablePosition == 38) {
            this.activeTable = this.activeTable == 0 ? 1 : 0;
            this.nextTablePosition = 0;
        }
        
        JTable[] tables = {this.table0, this.table1};
        tables[this.activeTable].setValueAt(squitter, this.nextTablePosition, 0);
        tables[this.activeTable].setValueAt(errorMessage, this.nextTablePosition++, 1);
    }
    public void addPacket(Squitter squitter, String errorMessage, byte df) {
        //TODO: DF muss noch rein
        this.addPacket(squitter, errorMessage);
    }
    public void addPacket(Squitter squitter, Update updateResponse) {
        if(this.nextTablePosition == 38) {
            this.activeTable = this.activeTable == 0 ? 1 : 0;
            this.nextTablePosition = 0;
        }
        
        JTable[] tables = {this.table0, this.table1};
        tables[this.activeTable].setValueAt(squitter, this.nextTablePosition, 0);
        tables[this.activeTable].setValueAt(updateResponse.update(), this.nextTablePosition, 1);
        if(updateResponse.getDF() != null)
            tables[this.activeTable].setValueAt(updateResponse.getDF(), this.nextTablePosition, 2);
        tables[this.activeTable].setValueAt(Integer.toHexString(updateResponse.getIcaoIdent()).toUpperCase(), this.nextTablePosition, 3);
        tables[this.activeTable].setValueAt(updateResponse.getFlightIdentTable(), this.nextTablePosition++, 4);
        //TODO: DF muss noch rein
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table0 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();

        setTitle("Squitter Decoder");
        setResizable(false);

        table0.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Squitter", "", "DF", "Hex", "Callsign"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table0.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table0);
        table0.getColumnModel().getColumn(0).setResizable(false);
        table0.getColumnModel().getColumn(0).setPreferredWidth(190);
        table0.getColumnModel().getColumn(1).setResizable(false);
        table0.getColumnModel().getColumn(1).setPreferredWidth(180);
        table0.getColumnModel().getColumn(2).setResizable(false);
        table0.getColumnModel().getColumn(2).setPreferredWidth(25);
        table0.getColumnModel().getColumn(3).setResizable(false);
        table0.getColumnModel().getColumn(3).setPreferredWidth(50);
        table0.getColumnModel().getColumn(4).setResizable(false);
        table0.getColumnModel().getColumn(4).setPreferredWidth(50);

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Squitter", "", "DF", "Hex", "Callsign"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table1);
        table1.getColumnModel().getColumn(0).setResizable(false);
        table1.getColumnModel().getColumn(0).setPreferredWidth(190);
        table1.getColumnModel().getColumn(1).setResizable(false);
        table1.getColumnModel().getColumn(1).setPreferredWidth(180);
        table1.getColumnModel().getColumn(2).setResizable(false);
        table1.getColumnModel().getColumn(2).setPreferredWidth(25);
        table1.getColumnModel().getColumn(3).setResizable(false);
        table1.getColumnModel().getColumn(3).setPreferredWidth(50);
        table1.getColumnModel().getColumn(4).setResizable(false);
        table1.getColumnModel().getColumn(4).setPreferredWidth(50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table0;
    private javax.swing.JTable table1;
    // End of variables declaration//GEN-END:variables
}